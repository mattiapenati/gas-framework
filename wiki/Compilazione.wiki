#summary Una breve guida a come viene compilato un programma

Esistono diversi linguaggi con i quali potete scrivere i vostri programmi, ma essenzialmente si dividono in due categorie:
  * *Interpretati*: un programma appositamente scritto interpreta i comandi e li esegue,
  * *Compilati*: un programma appositamente scritto traduce il vostro codice in linguaggio macchina e solo successivamente è possibile eseguirlo.

= Le fasi della compilazione =

I linguaggi C e C++ sono linguaggi compilati, il programma che si occupa di creare l'eseguibile è il GCC (GNU Compiler Collection). Il GCC comprende l'interprete per diversi linguaggi (FORTRAN, Java, Objective-C) e permette di compilare per quasi tutte le architetture esistenti (ogni processore possiede un suo linguaggio). Il processo di compilazione si divide in diversi passaggi.

== Preprocessore ==

Il preprocessore esegue tutte quelle istruzioni che iniziano con un cancelletto (`#include`, `#define`, `#ifdef`) e genera un file con l'estensione `ii`. Vediamo le principali operazioni che esegue. L'istruzione `#include` permette di inserire un file esterno in quello in cui avviene la chiamata, ed è proprio quello che avviene. Dati i due frammenti di codice:

_Vector.h_
{{{
class Vector {
 private:
  double *data;
  unsigned int N;
 public:
  ...
}
}}}

_Main.c_ 
{{{
#include "Vector.h"
int main ( int argc, char **argv ) {
 ...
}
}}}

il risultato è:

_Main.ii_
{{{
class Vector {
 private:
  double *data;
  unsigned int N;
 public:
  ...
}
int main ( int argc, char **argv) {
 ...
}
}}}

Se il programma comincia ad assumere dimensioni consistenti è possibile che alcuni file siano richiesti in più punti, questo è un problema, perché è possibile che si crei un'inclusione ciclica e il preprocessore non capisca come 